import java.util.*;
import java.math.*;
class RSA {
 static int y1 = 0;
 static int k = 0;
 static int y2 = 1;
 public static int prime(int max, int min, int p) {
  do {
   int pp = (int)(Math.random() * ((max - min) + 1)) + min; //choose no that to be prime
   if (trialdivision(pp) == 0)
    p = pp;
  } while (p == 1);

  return p;


 }
 public static int trialdivision(int no) {
  if (no == 2)
   return 0;
  else
  if (no % 2 == 0)
   return 1;
  else {
   int prime = 0;
   int divisor;
   if (no != 3)
    divisor = 3;
   else
    divisor = 5;
   int wall = (int) Math.sqrt(no);
   a: do {
    if (no % divisor == 0) {
     prime = 1;
     break a;
    }
    divisor += 2;

   } while (divisor < wall);
   return prime;
  }
 } //trialdivision Method
 public static int findGCD(int number1, int number2) { //  Euclidean algorithm
  //base case
  if (number2 == 0) {
   return number1;
  }
  return findGCD(number2, number1 % number2);
 }

 public static int findinverse(int number1, int number2) { //  Extended Euclidean algorithm
  //base case

  k++;
  if (number2 == 0) {
   return number1;
  }
  int r = number1 / number2;
  int temp = y2;
  y2 = (y2 * r) + y1;
  y1 = temp;

  int x = findinverse(number2, number1 % number2);

  return y1;
 }

 public static long fastmodularexpon(long ee, long n, long m) {

  String binary = Long.toBinaryString(ee);
  System.out.println("\npowers of 2 for " + ee + " =  " + binary + "\n");
  int count = binary.length() - binary.replace("1", "").length();
  double modu[] = new double[count];
  int j = 0;
  long e = 1;
  e = ((e * m) % n);
  int y = binary.length() - 1;
  if (binary.charAt(y) == '1') {
   modu[j] = e;
   y--;
  }
  j = 1;
  //int y=binary.length()-2;
  for (int i = 2; i <= (int) Math.pow(2, binary.length() - 1); i += i) {
   e = (e * e) % n;
   if (binary.charAt(y) == '1') {
    modu[j] = e;
    j++;
   }

   y--;



   int x = 1;
  }


  double sum = 1;
  System.out.println("Use modular multiplication properties to combine the calculated mod n value");
  for (j = 0; j < modu.length; j++)
   System.out.println(modu[j]);
  for (int x = 0; x < modu.length; x++)
   sum = sum * modu[x];

  return (long) sum % n;
 } //end encryption Method



} //class
